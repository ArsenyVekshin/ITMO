package ArsenyVekshin.lab5.utils.builder;

import ArsenyVekshin.lab5.collection.data.Entity;
import ArsenyVekshin.lab5.ui.InputHandler;
import ArsenyVekshin.lab5.ui.OutputHandler;
import ArsenyVekshin.lab5.ui.console.ConsoleInputHandler;
import ArsenyVekshin.lab5.ui.console.ConsoleOutputHandler;
import ArsenyVekshin.lab5.ui.exeptions.StreamBrooked;
import ArsenyVekshin.lab5.ui.file.FileInputHandler;
import ArsenyVekshin.lab5.utils.validators.Validator;

import java.util.HashMap;

/**
 * Class for build entity-extends object
 */
public class Builder {
    InputHandler inputHandler;
    OutputHandler outputHandler;
    private int errCounter = 0;

    /**
     * default constructor (streams = cli)
     */
    public Builder(){
        this.inputHandler = new ConsoleInputHandler();
        this.outputHandler = new ConsoleOutputHandler();
    }

    /**
     * custom-streams constructor
     * @param inputHandler input stream
     * @param outputHandler output stream
     */
    public Builder(InputHandler inputHandler, OutputHandler outputHandler){
        this.inputHandler = inputHandler;
        this.outputHandler = outputHandler;
    }

    /**
     * create new object by user-dialogue
     * @param tree object tree by ObjTree class
     * @return new object
     */
    public <T extends Entity> T buildDialogue(ObjTree tree) {
        T obj = (T) tree.constructor.get();
        HashMap<String, Object> values = new HashMap<>();

        for (ObjTree field : tree.getFields()) {
            try {
                if (field.isAutoGenerated()) {
                    continue;
                }

                if (!field.isPrimitive()) {
                    if (field.isMayNull() && askForSkip(field.getFieldName())) {
                        values.put(field.getFieldName(), null);
                    }
                    else {
                        System.out.println("Сектор " + field.getFieldName());
                        values.put(field.getFieldName(), buildDialogue(field));
                    }
                        continue;
                }

                while (true) {
                    System.out.println("Введите " + field.getFieldName() + " (" + field.getFieldType() + ")");
                    if (field.isEnum()) {
                        outputHandler.print("\t" + "Возможные значения: ");
                        for(Object o : field.getEnumContains().values()) outputHandler.print(o + " ");
                        outputHandler.println(" ");
                    }
                    String value = inputHandler.get();

                    if(value.strip().equals("") && field.isMayNull()) {
                        values.put(field.getFieldName(), Converter.convert(field.getFieldType(), null));
                        break;
                    }

                    try {
                        values.put(field.getFieldName(), isValid(field, value));
                        break;
                    }  catch (IllegalArgumentException e) {
                        System.out.println("Вы ввели недопустимое значение! " + e.getMessage() + ". Повторите ввод");
                    }
                }
            } catch (StreamBrooked e) {
                e.printStackTrace();
            }
        }
        obj.init(values);
        return (T) obj;
    }

    /**
     * Build object by values string-map
     * @param tree object tree by ObjTree class
     * @param data values string-map
     * @return new object
     * @throws StreamBrooked
     */
    public <T extends Entity> T buildByStringMap(ObjTree tree, HashMap<String, String> data) throws StreamBrooked {
        T obj = (T) tree.constructor.get();
        HashMap<String, Object> values = new HashMap<>();

        for (ObjTree field : tree.getFields()) {
            try{
                if (!field.isPrimitive()) {
                    HashMap<String, String> buffData = new HashMap<>();
                    boolean nullFlag = true;
                    for(String key: data.keySet()){
                        if(key.contains(field.getFieldName())) {
                            buffData.put(key.substring(field.getFieldName().length() + 1), data.get(key));
                            if (data.get(key) != null) nullFlag = false;
                        }
                    }
                    if(nullFlag) values.put(field.getFieldName(), null);
                    else values.put(field.getFieldName(), buildByStringMap(field, buffData));
                    continue;
                }

                values.put(field.getFieldName(), isValid(field, data.get(field.getFieldName())));
            } catch (Exception e) {
                outputHandler.println("Error while input by string: " + e.getMessage());
            }
        }
        obj.init(values);
        return (T)obj;
    }

    /**
     * protector-func for stop loop entering
     * @return flag to stop
     */
    private boolean dumbUserProtection(){
        errCounter++;
        if(errCounter>20 || isFile()){
            return true;
        }
        return false;
    }

    /**
     * answer user for skip this field
     * @param name field name
     * @return flag to skip
     * @throws StreamBrooked
     */
    private boolean askForSkip(String name) throws StreamBrooked {
        String ans;
        outputHandler.println("Поле " + name + " не обязательное, пропустить? (Y/N)");
        while (true){
            ans = inputHandler.get().trim().toUpperCase();
            if(ans.equals("N") || ans.equals("Y")) break;
            else {
                outputHandler.printErr("Разве \"" + ans + "\" похоже на Y/N ??, попробуйте еще раз");
                if(dumbUserProtection()) return false;
            }
        }
        return ans.equals("Y");
    }

    /**
     * Check is entered value are valid
     * @param field target field
     * @param value entered value
     * @return validated value
     * @throws IllegalArgumentException
     */
    private Object isValid(ObjTree field, String value) throws IllegalArgumentException {
        if(field.isEnum()) {
            if(field.getEnumContains().containsKey(value)) {
                return field.getEnumContains().get(value);
            } else {
                throw new IllegalArgumentException("Не существующая константа");
            }
        } else {
            if (field.getValidators() != null) {
                Validator.validate(value, field.getValidators());

            }
            return Converter.convert(field.getFieldType(), value);
        }
    }

    /**
     * is this script-executing??
     * @return boolean flag
     */
    private boolean isFile(){
        return inputHandler.getClass() == FileInputHandler.class;
    }
}
