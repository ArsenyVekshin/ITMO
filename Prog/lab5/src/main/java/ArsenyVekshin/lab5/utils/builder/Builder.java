package ArsenyVekshin.lab5.utils.builder;

import ArsenyVekshin.lab5.collection.data.Product;
import ArsenyVekshin.lab5.ui.InputHandler;
import ArsenyVekshin.lab5.ui.OutputHandler;
import ArsenyVekshin.lab5.ui.console.ConsoleInputHandler;
import ArsenyVekshin.lab5.ui.console.ConsoleOutputHandler;
import ArsenyVekshin.lab5.ui.exeptions.StreamBrooked;
import ArsenyVekshin.lab5.utils.validators.Validator;

import java.util.HashMap;

public class Builder {
    InputHandler inputHandler;
    OutputHandler outputHandler;
    private int errCounter = 0;

    public Builder(){
        this.inputHandler = new ConsoleInputHandler();
        this.outputHandler = new ConsoleOutputHandler();
    }

    public Builder(InputHandler inputHandler, OutputHandler outputHandler){
        this.inputHandler = inputHandler;
        this.outputHandler = outputHandler;
    }


    public <T extends Product> T build(ObjTree tree) throws StreamBrooked {


        T obj = (T) tree.constructor.get();
        HashMap<String, Object> values = new HashMap<>();

        for(ObjTree field : tree.getFields()){

            if(field.isAutoGenerated()) continue;

            if(field.isMayNull()){
                String ans;
                outputHandler.println("Поле " + field.getFieldName() + " не обязательное, пропустить? (Y/N)");
                while (true){
                        ans = inputHandler.get().trim().toUpperCase();
                        if(ans.equals("N") || ans.equals("Y")) break;
                        else {
                            outputHandler.printErr("Разве \"" + ans + "\" похоже на Y/N ??, попробуйте еще раз");
                            if(dumbUserProtection()) return null;
                        }
                    }
                if(ans.equals("Y")) {
                    values.put(field.getFieldName(), null);
                    continue;
                }
            }


            outputHandler.println("Введите " + field.getFieldName());
            if(!field.isPrimitive()){
                values.put(field.getFieldName(), build(field));
                continue;
            }

            if(field.isEnum()){
                outputHandler.println("Возможные значения: ");
                for(Object o : field.getEnumContains().values()) outputHandler.print(o + " ");
            }

            while(true) {
                String ans = inputHandler.get().trim();
                if (field.isEnum()) {
                    if (field.getEnumContains().containsKey(ans)) {
                        values.put(field.getFieldName(), field.getEnumContains().get(ans));
                        break;
                    } else throw new IllegalArgumentException();
                } else {
                    try {
                        values.put(field.getFieldName(), Converter.convert(field.getFieldType(), ans));
                        if (tree.getValidators().containsKey(field.getFieldName()))
                            Validator.validate(values.get(field.getFieldName()), tree.getValidators().get(field.getFieldName()));
                        break;
                    } catch (IllegalArgumentException e) {
                        outputHandler.printErr("Введенное значение некорректно: " + e.getMessage() + " - Повторите ввод");
                        if (dumbUserProtection()) return null;
                    }
                }
            }
        }
    //Storage.addNew(values);
    return (T) obj;
    }


    private boolean dumbUserProtection() throws StreamBrooked {
        errCounter++;
        if(errCounter>20){
            outputHandler.printErr("Sorry, you are so dumb, cmd execution blocked");
            return true;
        }
        return false;
    }
}
