package ArsenyVekshin.lab5.utils.builder;

import ArsenyVekshin.lab5.collection.data.Product;
import ArsenyVekshin.lab5.utils.validators.*;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.function.Supplier;

public class ObjTree {

    private String fieldName;
    private boolean isMayNull = true;
    private boolean isAutoGenerated = false;
    private boolean isEnum = false;
    private boolean isPrimitive = false;

    private Class<?> fieldType;
    public Supplier<? extends Product> constructor;

    private ArrayList<ObjTree> fields = new ArrayList<>();

    private HashMap<String, ArrayList<Validatable>> validators = new HashMap<>();
    private HashMap<String, Enum<?>> enumContains = new HashMap<>();


    public <T> ObjTree(String fieldName, Class<T> fieldType){
        this.fieldName = fieldName;
        this.fieldType = fieldType;
        isPrimitive = Converter.checkForPrimitive(fieldType);

        if(fieldType.isEnum()){
            isEnum = true;
            for(T i : fieldType.getEnumConstants())
                enumContains.put(i.toString(), (Enum<?>) i);
        }

        if(!isPrimitive){
            try{
                Product obj = (Product) fieldType.getConstructor().newInstance();
                constructor = obj.getConstructorReference();
                for(Field field : fieldType.getDeclaredFields()){
                    //if(field.getName().contains("constraint")) continue;

                    Annotation[] annotations = field.getAnnotations();
                    validators.put(field.getName(), new ArrayList<>());
                    for (Annotation note : annotations){
                        if(note instanceof AutoGenerated) isAutoGenerated = true;
                        if(note instanceof NotNull) isMayNull = false;

                        ValidatableAnnotation validatableAnnotation = note.annotationType().getAnnotation(ValidatableAnnotation.class);
                        if(validatableAnnotation != null){
                            Validatable validatable = validatableAnnotation.validator().getConstructor().newInstance();

                            if(note instanceof GreaterThan)
                                validatable = ((ValidatableWithArg)validatable).getInstance(((GreaterThan)note).value());
                            else
                                validatable = validatable.getInstance();

                            validators.get(field.getName()).add(validatable);
                        }
                    }
                    fields.add(new ObjTree(field.getName(), field.getType()));
                    fields.get(fields.size()-1).isAutoGenerated = isAutoGenerated;
                    fields.get(fields.size()-1).isMayNull = isMayNull;

                }
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }

    public <T> ObjTree(Class<T> type) {
        this(type.getName(), type);
    }

    public Supplier<? extends Product> getConstructor() {
        return constructor;
    }

    public ArrayList<ObjTree> getFields() {
        return fields;
    }

    public HashMap<String, Enum<?>> getEnumContains() {
        return enumContains;
    }

    public HashMap<String, ArrayList<Validatable>> getValidators() {
        return validators;
    }

    public boolean isEnum() {
        return isEnum;
    }

    public boolean isPrimitive() {
        return isPrimitive;
    }

    public boolean isAutoGenerated() {
        return isAutoGenerated;
    }

    public boolean isMayNull() {
        return isMayNull;
    }

    public Class<?> getFieldType() {
        return fieldType;
    }

    public String getFieldName() {
        return fieldName;
    }
}
