package ArsenyVekshin.lab7.common.collectionElems.data;


import ArsenyVekshin.lab7.common.annotations.*;
import ArsenyVekshin.lab7.common.collectionElems.CSVOperator;
import ArsenyVekshin.lab7.common.collectionElems.exceptions.InvalidValueEntered;
import ArsenyVekshin.lab7.common.security.User;

import java.io.Serializable;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Objects;
import java.util.function.Supplier;

import static ArsenyVekshin.lab7.common.tools.Comparators.compareFields;


public class Product extends Entity implements Cloneable, SQLTableElem, Serializable, Comparable {
    @AutoGenerated
    @NotNull
    @GreaterThan("0")
    private int id; //Поле не может быть null, Значение поля должно быть больше 0, Значение этого поля должно быть уникальным, Значение этого поля должно генерироваться автоматически
    @NotNull
    @StringNotNone
    private String name; //Поле не может быть null, Строка не может быть пустой
    @NotNull
    private Coordinates coordinates; //Поле не может быть null
    @NotNull
    @AutoGenerated
    private LocalDate creationDate; //Поле не может быть null, Значение этого поля должно генерироваться автоматически
    @GreaterThan("0")
    private float price; //Значение поля должно быть больше 0
    private UnitOfMeasure unitOfMeasure; //Поле может быть null
    private Organization manufacturer; //Поле может быть null

    private String owner;

    public Product(){}

    public Product(int id, String name, Coordinates coordinates, float price, UnitOfMeasure unitOfMeasure, Organization manufacturer){
        this.id = id; //генерируется вне объекта из глобального счетчика
        creationDate = LocalDate.from(LocalDateTime.now());
        try {
            setName(name);
            setCoordinates(coordinates);
            setPrice(price);
            setUnitOfMeasure(unitOfMeasure);
            setManufacturer(manufacturer);
        }
        catch (InvalidValueEntered e){
            System.out.println(e.getMessage());
        }
    }
    public Product(HashMap<String, Object> tree){
        init(tree);
    }

    public void generateID(int counter){
        setId(counter);
        if(manufacturer != null)manufacturer.setId((long)counter + Integer.MAX_VALUE);
    }

    //region GET_SET functions
    public void setId(int id){
        this.id = id;
    }
    public int getId() {
        return id;
    }


    public String getName() {
        return name;
    }

    public void setName(String name) throws InvalidValueEntered {
        if (name == null || name.length()==0) {
            this.name = "default";
            throw new InvalidValueEntered(this.getClass().getName(), "name");
        }
        else this.name = name;
    }

    public Coordinates getCoordinates() {
        return coordinates;
    }

    public void setCoordinates(Coordinates coordinates) throws InvalidValueEntered {
        if (coordinates == null) {
            this.coordinates = new Coordinates(0,0);
            throw new InvalidValueEntered(this.getClass().getName(), "coordinates");
        }
        else this.coordinates = coordinates;
    }

    public float getPrice() {
        return price;
    }

    public void setPrice(float price) throws InvalidValueEntered {
        if (price <=0) {
            this.price = 1;
            throw new InvalidValueEntered(this.getClass().getName(), "price");
        }
        else this.price = price;
    }

    public UnitOfMeasure getUnitOfMeasure() {
        return unitOfMeasure;
    }

    public void setUnitOfMeasure(UnitOfMeasure unitOfMeasure) throws InvalidValueEntered {
        if (unitOfMeasure == null) {
            this.unitOfMeasure = UnitOfMeasure.DEFAULT;
            throw new InvalidValueEntered(this.getClass().getName(), "unitOfMeasure");
        }
        else this.unitOfMeasure = unitOfMeasure;
    }

    public Organization getManufacturer() {
        return manufacturer;
    }

    public void setManufacturer(Organization manufacturer) throws InvalidValueEntered {
        if (manufacturer == null) throw new InvalidValueEntered(this.getClass().getName(), "manufacter");
        else this.manufacturer = manufacturer;
    }

    public LocalDate getCreationDate() {
        return creationDate;
    }

    public String getOwner() {
        return owner;
    }

    public void setOwner(String owner) {
        this.owner = owner;
    }
    //endregion GET_SET functions

    @Override
    public int hashCode() {
        return Objects.hash(id, name,coordinates, creationDate, price, unitOfMeasure, manufacturer);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Product check = (Product) o;
        return hashCode() == check.hashCode();
    }

    @Override
    public String toString(){
        String out = "Product(" +
                "\n\towner=" + owner +
                "\n\tid=" + id +
                "\n\tname=" + name +
                "\n\tcoordinates=" + coordinates.toString() +
                "\n\tcreationDate=" + creationDate +//.format(DateTimeFormatter.ofPattern("HH:mm:ss dd/MM/yyyy")) +
                "\n\tprice=" + price +
                "\n\tunitOfMeasure=" + unitOfMeasure + "\n\tmanufacturer=";
                if(manufacturer!=null) out+=manufacturer.toString();
                return  out + ");\n";
    }


    @Override
    public void init(HashMap<String, Object> values) {
        if(values.containsKey("id")) this.id = (int) values.get("id");
        this.name = (String) values.get("name");
        this.coordinates = (Coordinates) values.get("coordinates");
        if(values.containsKey("creationDate")) this.creationDate = (LocalDate) values.get("creationDate");
        else creationDate = LocalDate.from(LocalDateTime.now());
        this.price = (float) values.get("price");
        if(values.containsKey("unitOfMeasure")) this.unitOfMeasure = (UnitOfMeasure) values.get("unitOfMeasure");
        if(values.containsKey("manufacturer")) this.manufacturer = (Organization) values.get("manufacturer");
        this.owner = (String) values.get("owner");
    }

    @Override
    public HashMap<String, Object> getValues() {
        HashMap<String, Object> values = new HashMap<>();
        values.put("id", id);
        values.put("name", name);
        values.put("coordinates", coordinates);
        values.put("creationDate", creationDate);
        values.put("price", price);
        values.put("unitOfMeasure", unitOfMeasure);
        values.put("manufacturer", manufacturer);
        values.put("owner", owner);
        return values;
    }

    @Override
    public Supplier<Entity> getConstructorReference() {
        return Product::new;
    }

    @Override
    public Product clone() throws CloneNotSupportedException {
        return (Product) super.clone();
    }

    @Override
    public int compareTo(Object o) {
        if (o instanceof Product) {
            int buff = compareFields(this.name, ((Product) o).getName());
            if(buff==0) buff = compareFields(this.price, ((Product) o).getPrice());
            return buff;
        }
        return 0;
    }

    @Override
    public String genValuesLine() {
        String out = "(";
        out += "id =" + id;
        out += ", name =\'" + name + "\'";
        out += ", creationDate = timestamp(\'" + creationDate.toString() + "\')";
        out += ", price =" + price;
        out += ", owner =\'" + owner + "\'";
        if(unitOfMeasure!=null) out += ", unitOfMeasure =\'" + unitOfMeasure + "\'";

        if(coordinates!=null)
            out += coordinates.genValuesLine();

        if (manufacturer != null)
            manufacturer.genValuesLine();
        out += ")";

        return out;
    }

    @Override
    public void parseValuesLine(HashMap<String, Object> values) {
        id = Integer.parseInt((String) values.get("id"));
        name = (String) values.get("name");
        this.creationDate = LocalDate.parse((String) values.get("creationDate"));
        this.price = Float.parseFloat((String) values.get("price"));
        if (values.containsKey("unitOfMeasure"))
            this.unitOfMeasure = UnitOfMeasure.valueOf((String) values.get("unitOfMeasure"));
        this.owner = (String) values.get("owner");

        if(values.containsKey("coordinates_x")){
            coordinates = new Coordinates();
            coordinates.parseValuesLine(values);
        }

        if (values.containsKey("manufacturer_id")) {
            manufacturer = new Organization();
            manufacturer.parseValuesLine(values);
        }
    }
}


