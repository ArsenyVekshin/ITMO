package ArsenyVekshin.lab7.common.collectionElems.data;


import ArsenyVekshin.lab7.common.annotations.*;
import ArsenyVekshin.lab7.common.collectionElems.CSVOperator;
import ArsenyVekshin.lab7.common.collectionElems.exceptions.InvalidValueEntered;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Objects;
import java.util.function.Supplier;

import static ArsenyVekshin.lab7.common.tools.Comparators.compareFields;

public class Organization extends Entity implements Cloneable, Comparable, SQLTableElem, Serializable {
    @NotNull
    @GreaterThan("0")
    @AutoGenerated
    private long id; //Поле не может быть null, Значение поля должно быть больше 0, Значение этого поля должно быть уникальным, Значение этого поля должно генерироваться автоматически
    @NotNull
    @StringNotNone
    private String name; //Поле не может быть null, Строка не может быть пустой
    @GreaterThan("0")
    private double annualTurnover; //Значение поля должно быть больше 0
    @NotNull
    private OrganizationType type; //Поле не может быть null
    private Address postalAddress; //Поле может быть null


    public Organization(){}
    public Organization(long id, String name, double annualTurnover, OrganizationType type, Address postalAddress){
        this.id = id;
        try {
            setName(name);
            setAnnualTurnover(annualTurnover);
            setType(type);
            setPostalAddress(postalAddress);
        }
        catch (InvalidValueEntered e){
            System.out.println(e.getMessage());
        }
    }

    public long getId() {
        return id;
    }
    public void setId(long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) throws InvalidValueEntered {
        if (name == null || name.length()==0) {
            this.name = "default";
            throw new InvalidValueEntered(this.getClass().getName(), "name");
        }
        else this.name = name;
    }


    public double getAnnualTurnover() {
        return annualTurnover;
    }

    public void setAnnualTurnover(double annualTurnover) throws InvalidValueEntered {
        if (annualTurnover<=0) {
            this.annualTurnover = 1;
            throw new InvalidValueEntered(this.getClass().getName(), "annualTurnover");
        }
        else this.annualTurnover = annualTurnover;
    }

    public OrganizationType getType() {
        return type;
    }

    public void setType(OrganizationType type) throws InvalidValueEntered {
        if (type == null) {
            this.type = OrganizationType.DEFAULT;
            throw new InvalidValueEntered(this.getClass().getName(), "type");
        }
        else this.type = type;
    }

    public Address getPostalAddress() {
        return postalAddress;
    }

    public void setPostalAddress(Address postalAddress) throws InvalidValueEntered {
        if (postalAddress == null) {
            this.postalAddress = new Address("default", "default");
            throw new InvalidValueEntered(this.getClass().getName(), "postalAddress");
        }
        else this.postalAddress = postalAddress;
    }
    @Override
    public int hashCode() {
        return Objects.hash(id, name, annualTurnover, type, postalAddress);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Organization check = (Organization) o;
        return hashCode() == check.hashCode();
    }

    @Override
    public String toString(){
        return "Organization(" +
                "\n\t\tid=" + id +
                "\n\t\tname=" + name +
                "\n\t\tannualTurnover=" + annualTurnover +
                "\n\t\ttype=" + type +
                "\n\t\tpostalAddress="  + postalAddress.toString() + ");";
    }

    @Override
    public void init(HashMap<String, Object> values) {
        if(values.containsKey("id")) this.id = (long) values.get("id");
        this.name = (String) values.get("name");
        this.annualTurnover = (double) values.get("annualTurnover");
        this.type = (OrganizationType) values.get("type");
        if(values.containsKey("postalAddress")) this.postalAddress = (Address) values.get("postalAddress");
    }

    @Override
    public HashMap<String, Object> getValues() {
        HashMap<String, Object> values = new HashMap<>();
        values.put("id", id);
        values.put("name", name);
        values.put("annualTurnover", annualTurnover);
        values.put("type", type);
        values.put("postalAddress", postalAddress);
        return values;
    }


    public Supplier<Entity> getConstructorReference() {
        return Organization::new;
    }

    @Override
    public Organization clone() throws CloneNotSupportedException {
        return (Organization) super.clone();
    }

    @Override
    public int compareTo(Object o) {
        if (o == null || getClass() != o.getClass()) return 0;
        return compareFields(((Organization)o).getId(), getId());

    }

    @Override
    public String genValuesLine() {
        String out = "";
        out += ", manufacturer_id =" + id;
        out += ", manufacturer_name =\'" + name + "\'";
        out += ", manufacturer_type =\'" + type + "\'";
        out += ", manufacturer_annualTurnover =" + annualTurnover;
        if(postalAddress != null)
            out += postalAddress.genValuesLine();
        return out;
    }

    @Override
    public void parseValuesLine(HashMap<String, Object> values) {
        id = Long.parseLong((String) values.get("manufacturer_id"));
        name = (String) values.get("manufacturer_name");
        type = OrganizationType.valueOf((String) values.get("manufacturer_type"));
        annualTurnover = Double.parseDouble((String) values.get("manufacturer_annualTurnover"));
        if(values.containsKey("manufacturer_street")){
            postalAddress = new Address();
            postalAddress.parseValuesLine(values);
        }
    }

}
