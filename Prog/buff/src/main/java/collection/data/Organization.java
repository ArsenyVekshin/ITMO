package collection.data;

import collection.CSVOperator;
import collection.exceptions.*;
import utils.validators.AutoGenerated;
import utils.validators.GreaterThan;
import utils.validators.NotNull;
import utils.validators.StringNotNone;

import java.util.Objects;

public class Organization implements Cloneable, CSVOperator {
    @NotNull
    @GreaterThan("0")
    @AutoGenerated
    private long id; //Поле не может быть null, Значение поля должно быть больше 0, Значение этого поля должно быть уникальным, Значение этого поля должно генерироваться автоматически
    @NotNull
    @StringNotNone
    private String name; //Поле не может быть null, Строка не может быть пустой
    @GreaterThan("0")
    private double annualTurnover; //Значение поля должно быть больше 0
    @NotNull
    private OrganizationType type; //Поле не может быть null
    private Address postalAddress; //Поле может быть null


    public Organization(long id, String name, double annualTurnover, OrganizationType type, Address postalAddress){
        this.id = id;
        try {
            setName(name);
            setAnnualTurnover(annualTurnover);
            setType(type);
            setPostalAddress(postalAddress);
        }
        catch (InvalidValueEntered e){
            System.out.println(e.getMessage());
        }
    }

    public long getId() {
        return id;
    }
    public void setId(long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) throws InvalidValueEntered {
        if (name == null || name.length()==0) {
            this.name = "default";
            throw new InvalidValueEntered(this.getClass().getName(), "name");
        }
        else this.name = name;
    }


    public double getAnnualTurnover() {
        return annualTurnover;
    }

    public void setAnnualTurnover(double annualTurnover) throws InvalidValueEntered {
        if (annualTurnover<=0) {
            this.annualTurnover = 1;
            throw new InvalidValueEntered(this.getClass().getName(), "annualTurnover");
        }
        else this.annualTurnover = annualTurnover;
    }

    public OrganizationType getType() {
        return type;
    }

    public void setType(OrganizationType type) throws InvalidValueEntered {
        if (type == null) {
            this.type = OrganizationType.DEFAULT;
            throw new InvalidValueEntered(this.getClass().getName(), "type");
        }
        else this.type = type;
    }

    public Address getPostalAddress() {
        return postalAddress;
    }

    public Organization clone() throws CloneNotSupportedException {
        return (Organization) super.clone();
    }

    public void setPostalAddress(Address postalAddress) throws InvalidValueEntered {
        if (postalAddress == null) {
            this.postalAddress = new Address("default", "default");
            throw new InvalidValueEntered(this.getClass().getName(), "postalAddress");
        }
        else this.postalAddress = postalAddress;
    }
    @Override
    public int hashCode() {
        return Objects.hash(id, name, annualTurnover, type, postalAddress);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Organization check = (Organization) o;
        return hashCode() == check.hashCode();
    }

    @Override
    public String toString(){
        return "Organization(" +
                "id=" + id +
                ", name=" + name +
                ", annualTurnover=" + annualTurnover +
                ", type=" + type +
                ", postalAddress=" + postalAddress.toString() + ");";
    }

    @Override
    public String generateCSV() {
        return id +
                ", " + name +
                ", " + annualTurnover +
                ", " + type +
                ", " + postalAddress.generateCSV();
    }
}
