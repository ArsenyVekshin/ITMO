<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Users">
        <intProp name="ThreadGroup.num_threads">10</intProp>
        <intProp name="ThreadGroup.ramp_time">0</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
          <stringProp name="delimiter">;</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/Арсений/Documents/ITMO/IS/lab1/JMeter/users.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">index,username,password</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Default Request  (Server Address)" enabled="true">
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">32810</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Default Header Manager">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Register Request">
          <stringProp name="HTTPSampler.path">/auth/sign-up</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;username&quot;: &quot;${username}&quot;,&#xd;
	&quot;password&quot;: &quot;${password}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Login Request" enabled="true">
          <stringProp name="HTTPSampler.path">/auth/sign-in</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;username&quot;: &quot;${username}&quot;,&#xd;
	&quot;password&quot;: &quot;${password}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple CRUD"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Auth Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Route" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Route">
              <stringProp name="HTTPSampler.path">/route/add</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;&quot;,&#xd;
    &quot;name&quot;: &quot;route${index}&quot;,&#xd;
    &quot;coordinates&quot;: {&#xd;
      &quot;id&quot;: &quot;&quot;,&#xd;
      &quot;x&quot;: ${index},&#xd;
      &quot;y&quot;: ${index}&#xd;
    },&#xd;
    &quot;from&quot;: {&#xd;
      &quot;id&quot;: &quot;&quot;,&#xd;
      &quot;x&quot;: ${index},&#xd;
      &quot;y&quot;: ${index},&#xd;
      &quot;z&quot;: ${index},&#xd;
      &quot;name&quot;: &quot;from${index}&quot;&#xd;
    },&#xd;
    &quot;to&quot;: {&#xd;
      &quot;id&quot;: &quot;&quot;,&#xd;
      &quot;x&quot;: ${index},&#xd;
      &quot;y&quot;: ${index},&#xd;
      &quot;z&quot;: ${index},&#xd;
      &quot;name&quot;: &quot;to${index}&quot;&#xd;
    },&#xd;
    &quot;distance&quot;: ${index},&#xd;
    &quot;rating&quot;: ${index},&#xd;
    &quot;owner&quot;: &quot;${username}&quot;,&#xd;
    &quot;readonly&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Route">
              <stringProp name="HTTPSampler.path">/route/update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: ${index},&#xd;
    &quot;name&quot;: &quot;meowroute${index}&quot;,&#xd;
    &quot;coordinates&quot;: {&#xd;
      &quot;id&quot;: &quot;&quot;,&#xd;
      &quot;x&quot;: ${index},&#xd;
      &quot;y&quot;: ${index}&#xd;
    },&#xd;
    &quot;from&quot;: {&#xd;
      &quot;id&quot;: &quot;&quot;,&#xd;
      &quot;x&quot;: ${index},&#xd;
      &quot;y&quot;: ${index},&#xd;
      &quot;z&quot;: ${index},&#xd;
      &quot;name&quot;: &quot;fromwekfb${index}&quot;&#xd;
    },&#xd;
    &quot;to&quot;: {&#xd;
      &quot;id&quot;: &quot;&quot;,&#xd;
      &quot;x&quot;: ${index},&#xd;
      &quot;y&quot;: ${index},&#xd;
      &quot;z&quot;: ${index},&#xd;
      &quot;name&quot;: &quot;toeew${index}&quot;&#xd;
    },&#xd;
    &quot;distance&quot;: ${index},&#xd;
    &quot;rating&quot;: ${index},&#xd;
    &quot;owner&quot;: &quot;${username}&quot;,&#xd;
    &quot;readonly&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Route">
              <stringProp name="HTTPSampler.path">/route/delete</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;message&quot;: &quot;${index}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Import"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Import File">
              <stringProp name="HTTPSampler.path">/route/add/file</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="C:\Users\Арсений\Documents\ITMO\IS\lab1\scripts\multiAddExample.json" elementType="HTTPFileArg">
                    <stringProp name="File.mimetype">text/plain</stringProp>
                    <stringProp name="File.path">C:\Users\Арсений\Documents\ITMO\IS\lab1\scripts\multiAddExample.json</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="HTTPArgument.content_type">text/plain</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Form-Data Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">multipart/form-data</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Check Consistency"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Auth Header">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Consistency Request">
            <stringProp name="HTTPSampler.path">route/add</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: 10,&#xd;
    &quot;name&quot;: &quot;meow&quot;,&#xd;
    &quot;coordinates&quot;: {&#xd;
      &quot;id&quot;: null,&#xd;
      &quot;x&quot;: ${index},&#xd;
      &quot;y&quot;: ${index}&#xd;
    },&#xd;
    &quot;from&quot;: {&#xd;
      &quot;id&quot;: null,&#xd;
      &quot;x&quot;: ${index},&#xd;
      &quot;y&quot;: ${index},&#xd;
      &quot;z&quot;: ${index},&#xd;
      &quot;name&quot;: &quot;dscddscsdsd{index}&quot;&#xd;
    },&#xd;
    &quot;to&quot;: {&#xd;
      &quot;id&quot;: null,&#xd;
      &quot;x&quot;: ${index},&#xd;
      &quot;y&quot;: ${index},&#xd;
      &quot;z&quot;: ${index},&#xd;
      &quot;name&quot;: &quot;tsdsdcdo${index}&quot;&#xd;
    },&#xd;
    &quot;distance&quot;: ${index},&#xd;
    &quot;rating&quot;: ${index},&#xd;
    &quot;owner&quot;: &quot;${username}&quot;,&#xd;
    &quot;readonly&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Check Concurency" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Auth Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Concurency Request">
            <stringProp name="HTTPSampler.path">route/update</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: 10,&#xd;
    &quot;name&quot;: &quot;NillKiggers${index}&quot;,&#xd;
    &quot;coordinates&quot;: {&#xd;
      &quot;id&quot;: null,&#xd;
      &quot;x&quot;: ${index},&#xd;
      &quot;y&quot;: ${index}&#xd;
    },&#xd;
    &quot;from&quot;: {&#xd;
      &quot;id&quot;: null,&#xd;
      &quot;x&quot;: ${index},&#xd;
      &quot;y&quot;: ${index},&#xd;
      &quot;z&quot;: ${index},&#xd;
      &quot;name&quot;: &quot;from${index}&quot;&#xd;
    },&#xd;
    &quot;to&quot;: {&#xd;
      &quot;id&quot;: null,&#xd;
      &quot;x&quot;: ${index},&#xd;
      &quot;y&quot;: ${index},&#xd;
      &quot;z&quot;: ${index},&#xd;
      &quot;name&quot;: &quot;to${index}&quot;&#xd;
    },&#xd;
    &quot;distance&quot;: ${index},&#xd;
    &quot;rating&quot;: ${index},&#xd;
    &quot;owner&quot;: &quot;${username}&quot;,&#xd;
    &quot;readonly&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
